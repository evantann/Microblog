{{! Use the main layout }}
{{!< main }}

{{! New Post Submission Form }}
<section class="content-container">
    {{#if loggedIn}}
        <!-- show the create post form when logged in -->
        <section class="post-form">
            <!-- make a header here -->
            <h2>Create a new post</h2>
            <form action="/posts" method="POST">
                <!-- title input field name = "title" -->
                <!-- text area input field name = "content" -->
                <input type="text" name="title" id="title", placeholder="title"><br><br>
                <input type="text" name="content" id="content", placeholder="content">

                <div class="form-actions">
                    <button type="button" class="emoji-button" onclick="toggleEmojiPanel()">ðŸ˜€</button>
                    <button type="submit" class="post-button">Post</button>
                </div>
            </form>

            <div id="emoji-container" class="emoji-panel" style="display: none;">
                <!-- input field for the emoji search, use oninput="searchEmojis() -->
                <!-- a div, id = "emoji-grid" -->
                <input type="text" id="emoji-search" oninput="searchEmojis()" placeholder="Search emojis...">
                <div id="emoji-grid"></div>
            </div>
        </section>
    {{/if}}

    <section class="posts-list">
        <!-- recent posts -->

        {{#if posts.length}}
        <ul>
            {{#each posts}}
                <!-- you have to pass the user in to posts and this is the syntax -->
                    <p>{{> post this user=../user}}</p>  
            {{/each}}
        </ul>
        {{else}}
            <!-- no posts, oh no, what now? -->
            <p>No posts available</p>
        {{/if}}
    </section>
</section>


{{! JavaScript for Emoji Integration }}
<script>

let allEmojis = [];  // Global list to hold all emojis

function toggleEmojiPanel() {
    const container = document.getElementById('emoji-container');
    container.style.display = container.style.display === 'none' ? 'block' : 'none';
    
    if (container.style.display === 'block' && allEmojis.length == 0) {
        fetch('https://api.emojidex.com/v1/emoji?access_key=cd127ddcce669d990d7fdbfe8c71082b63ed7cd2')
            .then(response => response.json())
            .then(data => {
                console.log(data);
                allEmojis = data.emojis;
                displayEmojis(allEmojis);
            })
            .catch(error => {
                console.error('Error fetching emojis:', error);
                container.textContent = 'Error fetching emojis. Try again later.';
            });
    }
}

function displayEmojis(emojis, limit = 200) {
    const container = document.getElementById('emoji-grid');
    container.innerHTML = '';  // Clear previous results
    if (Array.isArray(emojis) && emojis.length > 0) {
        emojis.slice(0, limit).forEach(emoji => {
            const emojiElement = document.createElement('span');
            emojiElement.textContent = emoji.character;
            emojiElement.title = emoji.slug;  // Showing the emoji name on hover
            emojiElement.style.cursor = 'pointer';
            emojiElement.onclick = () => insertEmoji(emoji.character);
            container.appendChild(emojiElement);
        });
    } else {
        container.textContent = 'No emojis found. Try a different search!';
    }
}

function searchEmojis() {
    const searchTerm = document.getElementById('emoji-search').value.toLowerCase();
    const filteredEmojis = allEmojis.filter(emoji => emoji.slug.includes(searchTerm));
    displayEmojis(filteredEmojis);
}

function insertEmoji(emoji) {
    const contentInput = document.getElementById('content');
    const cursorPosition = contentInput.selectionStart;
    const content = contentInput.value;
    const newContent = content.slice(0, cursorPosition) + emoji + content.slice(cursorPosition);
    contentInput.value = newContent;
    contentInput.focus();  // Keep focus on the textarea
}
</script>